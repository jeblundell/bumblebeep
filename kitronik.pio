.program kitronik
.side_set 1

.define public T1 2
.define public T2 5
.define public T3 3

.wrap_target
bitloop:
    out x, 1        side 0 [T3 - 1]
    jmp !x do_zero  side 1 [T1 - 1]
    jmp bitloop     side 1 [T2 - 1]
do_zero:
    nop             side 0 [T2 - 1]
.wrap

% c-sdk {
#include "hardware/clocks.h"

static inline void kitronik_program_init (PIO pio, uint sm, uint offset, uint pin, float freq) {
    pio_gpio_init (pio, pin);
    pio_sm_set_consecutive_pindirs (pio, sm, pin, 1, true);
    pio_sm_config cfg = kitronik_program_get_default_config (offset);
    sm_config_set_sideset_pins (&cfg, pin);
    sm_config_set_out_shift (&cfg, false, true, 24);
    sm_config_set_fifo_join (&cfg, PIO_FIFO_JOIN_TX);

    /*int cycles_per_bit = kitronik_T1 + kitronik_T2 + kitronik_T3;
    float div = clock_get_hz(clk_sys) / (freq * cycles_per_bit);
    sm_config_set_clkdiv(&cfg, div);*/

    // Copy the way it's done in MicroPython
    uint64_t div = (uint64_t)clock_get_hz(clk_sys) * 256ULL / (uint64_t)freq;
    sm_config_set_clkdiv_int_frac (&cfg, div/256, div & 0xff);

    pio_sm_init(pio, sm, offset, &cfg);
    pio_sm_set_enabled(pio, sm, true);
}
%}
